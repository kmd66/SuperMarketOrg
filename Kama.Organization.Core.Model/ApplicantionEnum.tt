<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Concurrent" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ output extension=".cs" #>
<#
            Guid AzmoonID = Guid.Parse("2AC51699-9656-4060-B632-B85E4AF705BA");
            string connectionString = "Data Source=46.225.116.210;Initial Catalog=Kama.Mporg.Organization;User ID=sa; Password=Kama123qwe!@#";
            SqlDataReader rdr = null;
            List<Tuple<Guid, string, string>> CommandNameAndIDs = new List<Tuple<Guid, string, string>>();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("org.spGetApplications", conn);
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                SqlCommandBuilder.DeriveParameters(cmd);


                cmd.Parameters["@AID"].Value = Guid.Empty;
				cmd.Parameters["@AHostID"].Value = Guid.Empty;

                rdr = cmd.ExecuteReader();

                using (rdr)
                {
                    while(rdr.Read())
                    {
                        CommandNameAndIDs.Add(new Tuple<Guid, string, string>(rdr.GetGuid(0), rdr.GetString(4), rdr.GetString(1)));
                    }
                }
            }
#>
using System;
using System.Collections.Concurrent;

namespace Kama.Mporg.Organization.Core.Model
{
		public enum Applications : short
		{
		Unknown = 0,
		<#int counter = 1;#>
		<#foreach(var CommandNameAndID in CommandNameAndIDs)
		{#>
			<#=CommandNameAndID.Item2#> = <#=CommandNameAndID.Item3#>,
		<#}#>
	}
		public class ApplicationDic
		{

				readonly static Lazy<ApplicationDic> _instance = new Lazy<ApplicationDic>(() => new ApplicationDic());

		        public static ApplicationDic Instance
             => _instance.Value;

				readonly ConcurrentDictionary<Guid, Applications> _items = new ConcurrentDictionary<Guid, Applications>()
		{
			[Guid.Empty] = Applications.Unknown,
		<#foreach(var CommandNameAndID in CommandNameAndIDs)
		{#>
			[new Guid("<#=CommandNameAndID.Item1#>")] = Applications.<#=CommandNameAndID.Item2#>,
		<#}#>};

				public Applications this[Guid applicationId]
        {
            get
            {
                Applications application;
                _items.TryGetValue(applicationId, out application);
                return application;
            }
        }
	}
}
